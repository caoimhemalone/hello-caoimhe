{"version":3,"sources":["components/mainComponents/time.js","components/mainComponents/quote.js","components/mainComponents/date.js","components/mainComponents/days_left.js","components/mainComponents/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["App","getCurrentTime","hour","Date","getHours","minutes","getMinutes","seconds","getSeconds","am_pm","setState","currentTime","daysArray","map","item","key","getDay","currentDay","toUpperCase","state","this","clearInterval","timer","setInterval","View","Text","class","React","Component","RandomQuote","props","getNewQuote","getQuote","quote","author","axios","get","then","res","data","quotes","randomQuote","Math","floor","random","length","id","Calendar","today","date","getDate","getMonth","getFullYear","className","Countdown","dateTo","callback","alert","Dash","timeTillDate","timeFormat","todaysDate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15368238.chunk.js","sourcesContent":["import React from 'react';\n\nimport {View, Text} from 'react-native';\n\nexport default class App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = { currentTime: null, currentDay: null }\n    this.daysArray = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n  }\n\n  componentWillMount() {\n    this.getCurrentTime();\n  }\n\n  getCurrentTime = () => {\n    let hour = new Date().getHours();\n    let minutes = new Date().getMinutes();\n    let seconds = new Date().getSeconds();\n    let am_pm = 'pm';\n\n    if (minutes < 10) {\n      minutes = '0' + minutes;\n    }\n\n    if (seconds < 10) {\n      seconds = '0' + seconds;\n    }\n\n    if (hour > 12) {\n      hour = hour - 12;\n    }\n\n    if (hour === 0) {\n      hour = 12;\n    }\n\n    if (new Date().getHours() < 12) {\n      am_pm = 'am';\n    }\n\n    this.setState({ currentTime: hour + ':' + minutes + ':' + seconds + ' ' + am_pm });\n// eslint-disable-next-line \n    this.daysArray.map((item, key) => {\n      if (key === new Date().getDay()) {\n        this.setState({ currentDay: item.toUpperCase() });\n      }\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.getCurrentTime();\n    }, 1000);\n  }\n\n  render() {\n\n    return (\n        <View>\n          <Text><div class=\"dateContainer\">{this.state.currentDay}</div></Text>\n          <Text><div class=\"timeContainer\">{this.state.currentTime}</div></Text>\n        </View>\n    );\n  }\n}\n\n// const styles = StyleSheet.create(\n//   {\n//     timeText: {\n//       fontSize: 130,\n//       color: '#fff'\n//     },\n//     daysText: {\n//       color: '#fff',\n//       fontSize: 30,\n//       paddingBottom: 0\n//     }\n\n//   });","import React, { Component } from 'react'\nimport axios from 'axios'\n\nclass RandomQuote extends Component {\n   constructor(props) {\n      super(props)\n      this.state = {\n         quote: '',\n         author: ''\n      }\n   }\n\n   componentDidMount() {\n      this.getQuote()\n   }\n\n   getQuote() {\n      let url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n\n      axios.get(url)\n         .then(res => {\n            let data = res.data.quotes\n            let quoteNum = Math.floor(Math.random() * data.length)\n            let randomQuote = data[quoteNum]\n\n            this.setState({\n               quote: randomQuote['quote'],\n               author: randomQuote['author']\n            })\n         })\n   }\n\n   getNewQuote = () => { //will be called on clicking the New Quote button\n      this.getQuote()\n   }\n\n   render() {\n      const { quote, author } = this.state\n      return (\n        <div id='quote-box'>\n          <div id='text'><p><q>{quote}</q></p></div>\n           <div id='author'><h5>{author}</h5></div>\n        </div>\n      )\n   }\n}\n\nexport default RandomQuote","import React from 'react';\n\nexport default class Calendar extends React.Component {\n    constructor() {\n        super();\n\n        var today = new Date(),\n            date = today.getDate() + '-' +  (today.getMonth() + 1) + '-' + today.getFullYear();\n\n        this.state = {\n            date: date\n        };\n    }\n\n    render() {\n        return (\n            <div className='date'>\n                <span>{this.state.date}</span>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react'\nimport DateCountdown from 'react-date-countdown-timer';\n\nclass Countdown extends Component {\n\n    render() {\n        return (\n            <div className=\"days-left\">\n                <div className=\"text heading\">make every day count</div>\n                <DateCountdown dateTo='September 02, 2077' callback={()=>alert('Congrats you`re not dead')}  />\n                <div className=\"text\">left on earth</div>\n            </div>\n        );\n    }\n}\n\nexport default Countdown","import React from 'react';\nimport Clock from './time';\nimport Quote from './quote';\nimport Calendar from './date';\nimport Countdown from './days_left';\n\nfunction Dash() {\n  return (\n    <div className=\"dash-wrapper\">\n      <div className=\"top\">\n        <section className=\"date\"><Calendar/></section>\n        <section className=\"days-left\"><Countdown timeTillDate=\"09 02 2077, 12:00 am\" timeFormat=\"MM DD YYYY, h:mm a\" />\n</section>\n      </div>\n      <div className=\"mainInfo\">\n\t      <section className=\"time\"><Clock/>\n        </section>\n\t      <section className=\"hello-caoimhe\"> Hello, Caoimhe </section>\n\t      <section className=\"quote\"> <Quote/> </section>\n      </div>\n    </div>\n  );\n}\n\n\nexport default Dash;\n","import React from 'react';\n\n//includes\n//import './Assets/css/default.min.css';\nimport './Assets/scss/default.scss';\n\n//components\nimport Dash from './components/mainComponents/dashboard';\n\nvar today = new Date(),\n\ttodaysDate = \"bkg-\"+today.getDate();\n\nfunction App() {\n  return (\n    <div className=\"App\" id={ todaysDate }>\n      <Dash />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}