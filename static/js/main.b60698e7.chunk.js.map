{"version":3,"sources":["components/mainComponents/weather_api.js","components/mainComponents/time.js","components/mainComponents/quote.js","components/mainComponents/date.js","components/mainComponents/lat_long.js","components/mainComponents/displaytemp.js","components/mainComponents/weather.js","components/mainComponents/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","module","exports","getTemp","Lat","Long","requestUrl","get","then","res","data","cod","message","Error","App","getCurrentTime","hour","Date","getHours","minutes","getMinutes","seconds","getSeconds","am_pm","setState","currentTime","daysArray","map","item","key","getDay","currentDay","toUpperCase","state","this","clearInterval","timer","setInterval","View","Text","style","styles","daysText","timeText","React","Component","StyleSheet","create","fontSize","color","paddingBottom","RandomQuote","props","getNewQuote","getQuote","quote","author","quotes","randomQuote","Math","floor","random","length","id","Calendar","today","date","getDate","getMonth","getFullYear","className","LatLong","that","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","onPass","error","enableHighAccuracy","timeout","maximumAge","DisplayTemp","Temp","Name","Weather","bind","OpenWeatherAPI","main","temp","name","errorMessage","alert","Dash","todaysDate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b60698e7.chunk.js","sourcesContent":["var axios = require('axios');\nconst OPEN_WEATHER_MAP_URL = 'http://api.openweathermap.org/data/2.5/weather?&units=metric&APPID=015b3da84db4a7f2c31cf7b97ac9b95c';\nmodule.exports = {\n  getTemp: function (Lat,Long) {\n    var requestUrl = `${OPEN_WEATHER_MAP_URL}&lat=${Lat}&lon=${Long}`;\nreturn axios.get(requestUrl).then(function (res) {\n      if (res.data.cod && res.data.message) {\n        throw new Error(res.data.message);\n      } else {\n        return res.data;\n      }\n    }, function (res) {\n      //throw new Error(res.data.message);\n    });\n  }\n}","import React from 'react';\n\nimport {View, Text, StyleSheet} from 'react-native';\n\nexport default class App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = { currentTime: null, currentDay: null }\n    this.daysArray = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n  }\n\n  componentWillMount() {\n    this.getCurrentTime();\n  }\n\n  getCurrentTime = () => {\n    let hour = new Date().getHours();\n    let minutes = new Date().getMinutes();\n    let seconds = new Date().getSeconds();\n    let am_pm = 'pm';\n\n    if (minutes < 10) {\n      minutes = '0' + minutes;\n    }\n\n    if (seconds < 10) {\n      seconds = '0' + seconds;\n    }\n\n    if (hour > 12) {\n      hour = hour - 12;\n    }\n\n    if (hour === 0) {\n      hour = 12;\n    }\n\n    if (new Date().getHours() < 12) {\n      am_pm = 'am';\n    }\n\n    this.setState({ currentTime: hour + ':' + minutes + ':' + seconds + ' ' + am_pm });\n// eslint-disable-next-line \n    this.daysArray.map((item, key) => {\n      if (key === new Date().getDay()) {\n        this.setState({ currentDay: item.toUpperCase() });\n      }\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.getCurrentTime();\n    }, 1000);\n  }\n\n  render() {\n\n    return (\n        <View>\n          <Text style={styles.daysText}>{this.state.currentDay}</Text>\n          <Text style={styles.timeText}>{this.state.currentTime}</Text>\n        </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create(\n  {\n    // container: {\n    //   flex: 1,\n    //   paddingTop: (Platform.OS === 'ios') ? 20 : 0,\n    //   justifyContent: 'center',\n    //   alignItems: 'center',\n    // },\n    // headerText: {\n    //   fontSize: 30,\n    //   textAlign: \"center\",\n    //   margin: 10,\n    //   color: 'black',\n    //   fontWeight: \"bold\"\n    // },\n    timeText: {\n      fontSize: 130,\n      color: '#fff'\n    },\n    daysText: {\n      color: '#fff',\n      fontSize: 30,\n      paddingBottom: 0\n    }\n\n  });","import React, { Component } from 'react'\nimport axios from 'axios'\n\nclass RandomQuote extends Component {\n   constructor(props) {\n      super(props)\n      this.state = {\n         quote: '',\n         author: ''\n      }\n   }\n\n   componentDidMount() {\n      this.getQuote()\n   }\n\n   getQuote() {\n      let url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n\n      axios.get(url)\n         .then(res => {\n            let data = res.data.quotes\n            let quoteNum = Math.floor(Math.random() * data.length)\n            let randomQuote = data[quoteNum]\n\n            this.setState({\n               quote: randomQuote['quote'],\n               author: randomQuote['author']\n            })\n         })\n   }\n\n   getNewQuote = () => { //will be called on clicking the New Quote button\n      this.getQuote()\n   }\n\n   render() {\n      const { quote, author } = this.state\n      return (\n        <div id='quote-box'>\n          <div id='text'><p><q>{quote}</q></p></div>\n           <div id='author'><h5>{author}</h5></div>\n        </div>\n      )\n   }\n}\n\nexport default RandomQuote","import React from 'react';\n\nexport default class Calendar extends React.Component {\n    constructor() {\n        super();\n\n        var today = new Date(),\n            date = today.getDate() + '-' +  (today.getMonth() + 1) + '-' + today.getFullYear();\n\n        this.state = {\n            date: date\n        };\n    }\n\n    render() {\n        return (\n            <div className='date'>\n                <span>{this.state.date}</span>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nclass LatLong extends Component{\n \tconstructor(props) {\n \t\tsuper(props);\n\t\tthis.state = {\n \t\t\tLat:'Loading',\n \t\t\tLong:'Loading'\n \t\t}\n \t}\n \tcomponentDidMount() {\n \t\tvar that = this;\n \t\tnavigator.geolocation.getCurrentPosition(\n \t\t\tfunction(position) {\n \t\t\t\tthat.setState({\n \t\t\t\t\tLat: position.coords.latitude,\n \t\t\t\t\tLong: position.coords.longitude\n \t\t\t\t});\n \t\t\t\tthat.props.onPass(that.state.Lat,that.state.Long)\n \t\t\t},\n \t\t\tfunction (error) {\n\t\t\t},\n \t\t\t{enableHighAccuracy: true, timeout: 20000, maximumAge: 1000}\n \t\t)\n \t}\n \trender () {\n\t\treturn <div></div>\n \t}\n}\nexport default LatLong;","import React, { Component } from 'react';\n//require('style!css!DemoStyle');\nclass DisplayTemp extends Component {\nrender(){\n    var {Temp, Name} = this.props;\n  //var {Temp, Lat, Name, Long} = this.props;}\n    if(Temp==='Loading'){\n      return <div className='loading'>Loading Your Local Weather...</div>\n    }\n    else {\n      // var Lat = Math.round(Lat)\n      // var Long = Math.round(Long)\n      return(\n        <div className='display-weather'>\n          It is {Temp} &#8451; at {Name}\n          {/*<br />Latitude: {Lat} and Longitude: {Long}*/}\n        </div>\n      )\n    }\n}\n}\n\nexport default DisplayTemp;\n","import React, { Component } from 'react';\n//import ReactDOM from 'react-dom';\nimport LatLong from './lat_long';\nimport DisplayTemp from './displaytemp'\nimport OpenWeatherAPI from './weather_api'\nclass Weather extends Component {\nconstructor(props){\n    super(props);\n    this.state ={\n      Lat:'',\n      Long:'',\n      Temp:'Loading'\n    }\n    this.onPass = this.onPass.bind(this)\n  };\nonPass(Lat,Long) {\n    var that = this;\nOpenWeatherAPI.getTemp(Lat,Long).then(function (data) {\n      that.setState({\n        Lat: Lat,\n        Long: Long,\n        Temp: data.main.temp,\n        Name: data.name\n      });\n    },\n    function (errorMessage) {\n        alert(errorMessage);\n    });\n  }\nrender(){\n    return(\n      <div>\n        <LatLong onPass = {this.onPass} />\n        <DisplayTemp Temp = {this.state.Temp} Name = {this.state.Name} Lat = {this.state.Lat} Long = {this.state.Long}/>\n      </div>\n    );\n  }\n}\n\nexport default Weather;","import React from 'react';\nimport Clock from './time';\nimport Quote from './quote';\nimport Calendar from './date';\nimport Weather from './weather';\n\nfunction Dash() {\n  return (\n    <div className=\"dash-wrapper\">\n      <div className=\"top\">\n        <section className=\"date\"><Calendar/></section>\n        <section className=\"weather\"><Weather/></section>\n      </div>\n      <div className=\"mainInfo\">\n\t      <section className=\"time\"><Clock/>\n        </section>\n\t      <section className=\"hello-caoimhe\"> Hello, Caoimhe </section>\n\t      <section className=\"quote\"> <Quote/> </section>\n      </div>\n    </div>\n  );\n}\n\n\nexport default Dash;\n","import React from 'react';\n\n//includes\nimport './Assets/css/default.min.css';\n\n//components\nimport Dash from './components/mainComponents/dashboard';\n\nvar today = new Date(),\n\ttodaysDate = \"bkg-\"+today.getDate();\n\nfunction App() {\n  return (\n    <div className=\"App\" id={ todaysDate }>\n      <Dash />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}